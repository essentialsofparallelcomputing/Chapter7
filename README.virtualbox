# These are instructions to setup a Ubuntu virtual machine for the examples in
# this chapter. The first part of the instructions must be done manually. The
# last half can be done by executing this file as a script as instructed.

# Download VirtualBox and install

# Download Ubuntu desktop install and save on local disk [ubuntu-18.04.2-desktop-amd64.iso]
# Download VBoxGuestAdditions.iso

# Setup new machine

# Click on New

# Type in a name [chapter7]
# Select Linux and Ubuntu 64-bit

# Select the amount of memory [8192]

# Create a virtual hard disk now
# Select VDI VirtualBox Disk Image

# Select Fixed Size Disk
# Select 50 GB

# Should see the new virtual machine added to the list

# Start Ubuntu virtual machine (Green arrow, start)

# Select iso file saved earlier [ubuntu-18.04.2-desktop-amd64.iso]

# Select Install Ubuntu

# Keyboard -- continue

# Select minimal, download updates while installing and install third-party

# Select Erase disk and install Ubuntu
# Select Install Now

# Select timezone

# Your name [chapter7]
# Your computer's name [chapter7-virtualbox]
# Username [chapter7]
# password [chapter7]
# Select "Require my password to log in"

# Select continue

# Long time ....

# Installation is complete, Restart computer

# sign in

# click through whats new

# select dots at bottom left and start up a terminal

# sudo apt-get update
# sudo apt-get install build-essential dkms git -y
# Now go up to devices and insert virtualbox-guest-additions-iso

# Make virtualbox window active and select devices from window menus at top of screen
#     Shared Clipboard --> bidirectional
#     Drag and Drop --> bidirectional
#     Install guest additions (under devices pull-down)
#     Remove optical disk -- from desktop, right click and eject or from devices-->optical disk-->remove disk from virtual drive
#     reboot and test copy paste
# Copy on Mac is command-C and paste in Ubuntu is shift-ctrl-v

# Reboot to get cut and paste and screen size fixed

sudo apt-get update && \
     apt-get install -y cmake git vim gcc g++ wget software-properties-common && \
     apt-get clean && \
     rm -rf /var/lib/apt/lists/*

# Installing latest GCC compiler (version 9) for best vectorization
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update && \
     apt-get install -y gcc-9 g++-9 && \
     apt-get clean && \
     rm -rf /var/lib/apt/lists/*

sudo update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-9 90 \
                         --slave   /usr/bin/g++  g++  /usr/bin/g++-9 \
                         --slave   /usr/bin/gcov gcov /usr/bin/gcov-9

# Installing Intel compiler since it gives the best vectorization across compiler vendors
pushd /tmp
wget -q https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
sudo rm -f GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
popd

sudo echo "deb https://apt.repos.intel.com/oneapi all main" >> /etc/apt/sources.list.d/oneAPI.list
sudo echo "deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic main" >> /etc/apt/sources.list.d/intel-graphics.list
sudo apt-get update && \
     apt-get install -y \
             intel-hpckit-getting-started \
             intel-oneapi-common-vars \
             intel-oneapi-common-licensing \
             intel-oneapi-dev-utilities \
             intel-oneapi-icc \
             intel-oneapi-ifort \
             intel-oneapi-openmp \
             intel-oneapi-inspector && \
     apt-get clean && \
     rm -rf /var/lib/apt/lists/*

# If Software updater prompts, install updated software --> wait ....

git clone https://github.com/essentialsofparallelcomputing/Chapter7.git

